body{
    --azulclaro: lightskyblue; /* Variables en CSS, sin necesidad de Preprocesador */
    font-family: Arial, Helvetica, sans-serif;
    text-align: center;
}

h3{
    font-weight: normal;
}

#layout{
    
    display: flex;  /* Relacionado al Flexbox, permite que se posicionen uno al lado del otro y toma
    un width del 100% (Ancho máximo que permita la caja que lo contenga)*/

    /* display: inline-flex;  Relacionado al Flexbox, se adapta al contenido que lleva dentro, el
    width se convierte en un width automático y se adapta al contenido que lleva */

    /* flex-direction: column;  Permite especificar como queremos que se almacene la información
    dentro de la caja que lo contiene, por defecto viene como row (Fila) */

    /* flex-direction: row; */

    /* flex-wrap: wrap; Permite que los elementos que sobrepasan la caja se posicionen debajo y no
    se salgan de la caja que los contiene, por defecto viene nowrap */

    flex-flow: row wrap; /* Resume lo de las lineas de flex-direction y flex-wrap */
    justify-content: space-around; /* Permite ajustar el contenido del layout según la condición
    (Horizontal), por defecto viene en flex-start (Izquierda) */

    height: 425px;
    align-items: flex-start; /* Permite ajustar el contenido del layout según la condición
    (Vertical), ya que por defecto los elementos tomarian el 100% del height de la caja 
    que los contiene */

    border: 2px solid black;
    padding: 5px;
    
}

.box{
    /* flex-grow: 1;  Permite adaptar el tamaño de las cajas como queramos, esto no puede ir 
    dentro del layout sino dentro de los elementos que contiene, en este caso las cajas. Normalmente
    se pone como 1 para que cada elemento (caja) ocupe el mismo espacio dentro del layout */

    /* flex-basis: calc((100%/3) - 65px); Permite establecer el tamaño minimo que debe de tener cada 
    una de las cajas, en este caso decimos que cada una ocuparia un width */
    
    font-size: 20px;
    font-weight: bold;
    color: white;
    padding: 20px;
    border: 2px solid #222;
    margin: 10px;
    background: #ccc;
    color: #222;
    font-weight: normal;
}

.red{
    /* flex-grow: 4;  Se puede modificar el flex-grow para que sea un poco más ancho que los otros
    que tienen el flex-grow de 1  */
    align-self: flex-start; /* Permite posicional verticalmente solo un elemento */
    order: 1; /* El order permite posicionar los elementos como queramos, para este caso se 
    posicionan primero los impares en orden ascendente y luego los pares */
    background: lightcoral;
    
}

.green{
    /* flex-shrink: 0;  Propiedad opuesta al flex-grow, permite disminuir el tamaño de la caja */
    /* flex-grow: 0; */
    /* flex-basis: calc((100%/2) - 65px); */
    align-self: center;
    order: 4; 
    background: lightgreen;
}

.blue{
    order: 2;
    margin-top: 95px;
    background: var(--azulclaro)
}

.orange{
    /* flex-basis: calc((100%/2) - 65px); */
    align-self: center;
    margin-top: 185px;
    order: 5;
    background: lightsalmon;
    
}

.yellow{
    /* flex-shrink: 0; */
    /* flex-grow: 0; */
    align-self: center;
    order: 3;
    background: lightgoldenrodyellow;
}
    
.pink{
    /* flex-grow: 4; */
    /* flex-basis: calc((100%) - 65px); */
    align-self: flex-end;
    order: 6;
    background: lightpink;
}